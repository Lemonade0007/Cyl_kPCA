res = foreach(i=1:100, .packages = "gtools") %dopar% {
set.seed(i)
Pi = rdirichlet(N,rep(1,K))
Pi[1:K,] = diag(rep(1,K))
# Theta = matrix(rbeta(J*K,1,200),ncol=K)
Theta = matrix(rbeta(J*K,1000,1000),ncol=K)
X_t = Pi%*%t(Theta)
return(cal_missing_err(X_t,Pi))
}
err.svd = rep(0,100)
err.hollow = rep(0,100)
err.hetero = rep(0,100)
for (i in 1:100) {
err.svd[i] = res[[i]]$err.svd
err.hollow[i] = res[[i]]$err.hollow
err.hetero[i] = res[[i]]$err.hetero
}
boxplot(cbind(err.svd,err.hollow,err.hetero))
res = foreach(i=1:100, .packages = "gtools") %dopar% {
set.seed(i)
Pi = rdirichlet(N,rep(1,K))
Pi[1:K,] = diag(rep(1,K))
# Theta = matrix(rbeta(J*K,1,200),ncol=K)
Theta = matrix(rbeta(J*K,1,1),ncol=K)
X_t = Pi%*%t(Theta)
return(cal_missing_err(X_t,Pi))
}
err.svd = rep(0,100)
err.hollow = rep(0,100)
err.hetero = rep(0,100)
for (i in 1:100) {
err.svd[i] = res[[i]]$err.svd
err.hollow[i] = res[[i]]$err.hollow
err.hetero[i] = res[[i]]$err.hetero
}
boxplot(cbind(err.svd,err.hollow,err.hetero))
Q = diag(c(1,100))
f <- function(x){
t(x)%*%Q%*%x/2
}
grad.f <- function(x){
Q%*%x
}
alpha = 4/121
beta = 81/121
X = matrix(c(100,1),ncol=1)
grad.norm = 10
p = 0
iter = 0
while(grad.norm >= 1e-8){
iter = iter + 1
f.grad = grad.f(X[,iter])
p = -f.grad + beta*p
X.new = X[,iter] + alpha*p
grad.norm = sum(f.grad^2)
X = cbind(X,X.new)
}
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
ggplot()+
geom_line(aes(x=X[1,],y=X[2,]),lwd=.75)+
geom_point(aes(x=X[1,],y=X[2,]))+
xlab("x")+
ylab("y")
fx = apply(X,2,f)
logf = log(fx,base = 10)
ggplot()+
geom_line(aes(x=1:iter,y=logf),lwd=.75)+
geom_point(aes(x=1:iter,y=logf))+
xlab("iterations")+
ylab("logf")
fx = apply(X,2,f)
logf = log(fx,base = 10)
ggplot()+
geom_line(aes(x=(1:iter),y=logf),lwd=.75)+
geom_point(aes(x=(1:iter),y=logf))+
xlab("iterations")+
ylab("logf")
fx = apply(X,2,f)
logf = log(fx,base = 10)
ggplot()+
geom_line(aes(x=(1:(iter+1)),y=logf),lwd=.75)+
geom_point(aes(x=(1:(iter+1)),y=logf))+
xlab("iterations")+
ylab("logf")
A = matrix(c(1,0,0,100),byrow=T,nrow=2)
X = matrix(c(100,1),nrow=2)
grad.norm = 10
iter = 1
t = 2/101
while (grad.norm >= 1e-8){
iter = iter + 1
x.new = X[,iter-1] - t*A%*%X[,iter-1]
X = cbind(X,x.new)
grad.norm = sum((A%*%X[,iter])^2)
}
logf.g = log(apply(X,2,f),base = 10)
iter.hb = 1:length(logf)
iter.g = 1:length(logf.g)
ggplot()+
geom_line(aes(iter.hb,logf),lwd=.75)+
geom_line(aes(iter.g,logf.g),lwd=.75,col="red")+
xlab("iterations")+
ylab("logf")
#| echo: false
#| message: false
#| warning: false
A = read.csv("A.csv",header = F)
b = read.csv("b.csv",header = F)
x0 = read.csv("x0.csv",header = F)
sign(c(1,-1,2,5))
c = 0.01
beta = 0.5
f <- function(x){
1/2*sum((A%*%x-b)^2)+sum(abs(x))
}
grad.f <- function(x){
t(A)%*%A%*%x-t(A)%*%b+sign(x)
}
cal_alpha <- function(k){
c*k^(-beta)
}
X = matrix(x0,ncol=1)
x.dist = 10
iter = 1
while(x.dist >= 1e-8){
iter = iter + 1
f.grad = grad.f(X[,iter-1])
ak = cal_alpha(iter-1)
X.new = X[,iter-1] - ak*f.grad
X = cbind(X,X.new)
x.dist = sum((X.new-X[,iter-1])^2)
}
#| echo: false
#| message: false
#| warning: false
A = read.csv("A.csv",header = F)
b = read.csv("b.csv",header = F)
x0 = read.csv("x0.csv",header = F)
A = as.matrix(A)
b = as.matrix(b)
x0 = as.matrix(x0)
c = 0.01
beta = 0.5
f <- function(x){
1/2*sum((A%*%x-b)^2)+sum(abs(x))
}
grad.f <- function(x){
t(A)%*%A%*%x-t(A)%*%b+sign(x)
}
cal_alpha <- function(k){
c*k^(-beta)
}
X = matrix(x0,ncol=1)
x.dist = 10
iter = 1
while(x.dist >= 1e-8){
iter = iter + 1
f.grad = grad.f(X[,iter-1])
ak = cal_alpha(iter-1)
X.new = X[,iter-1] - ak*f.grad
X = cbind(X,X.new)
x.dist = sum((X.new-X[,iter-1])^2)
}
c = 0.01
beta = 0.5
f <- function(x){
1/2*sum((A%*%x-b)^2)+sum(abs(x))
}
grad.f <- function(x){
t(A)%*%A%*%x-t(A)%*%b+sign(x)
}
cal_alpha <- function(k){
c*k^(-beta)
}
X = matrix(x0,ncol=1)
x.dist = 10
iter = 1
while(x.dist[iter] >= 1e-8){
iter = iter + 1
f.grad = grad.f(X[,iter-1])
ak = cal_alpha(iter-1)
X.new = X[,iter-1] - ak*f.grad
X = cbind(X,X.new)
x.dist = c(x.dist,sum((X.new-X[,iter-1])^2))
}
log.dist = log(sqrt(x.dist))
log.iter = log(1:iter)
ggplot()+
geom_line(aes(log.iter,log.dist),lwd=.75)+
xlab("log(k)")+
ylab("log x dist")
xb = X[,iter]
log.bd = log(sqrt(colSums((X-xb)^2)))
ggplot()+
geom_line(aes(log.iter,log.bd),lwd=.75)+
xlab("log(k)")+
ylab("log optimal dist")
hx = apply(X,2,f)
logh = log(hx)
ggplot()+
geom_line(aes(log.iter,log.h),lwd=.75)+
xlab("log(k)")+
ylab("log dist")
hx = apply(X,2,f)
logh = log(hx)
ggplot()+
geom_line(aes(log.iter,logh),lwd=.75)+
xlab("log(k)")+
ylab("log dist")
#| echo: false
#| message: false
#| warning: false
library(tidyverse)
#| echo: false
#| message: false
#| warning: false
A = read.csv("A.csv",header = F)
b = read.csv("b.csv",header = F)
x0 = read.csv("x0.csv",header = F)
A = as.matrix(A)
b = as.matrix(b)
x0 = as.matrix(x0)
svd.A = svd(A)
svd.A$d
svd.A = svd(A)
min(svd.A$d^2)
cat("m=",min(svd.A$d^2))
m = min(svd.A$d^2)
cal_alpha <- function(k){
1/(m*k)
}
X = matrix(x0,ncol=1)
x.dist = 10
iter = 1
while(x.dist[iter] >= 1e-8){
iter = iter + 1
f.grad = grad.f(X[,iter-1])
ak = cal_alpha(iter-1)
X.new = X[,iter-1] - ak*f.grad
X = cbind(X,X.new)
x.dist = c(x.dist,sum((X.new-X[,iter-1])^2))
}
f <- function(x){
1/2*sum((A%*%x-b)^2)+sum(abs(x))
}
grad.f <- function(x){
t(A)%*%A%*%x-t(A)%*%b+sign(x)
}
m = min(svd.A$d^2)
cal_alpha <- function(k){
1/(m*k)
}
X = matrix(x0,ncol=1)
x.dist = 10
iter = 1
while(x.dist[iter] >= 1e-8){
iter = iter + 1
f.grad = grad.f(X[,iter-1])
ak = cal_alpha(iter-1)
X.new = X[,iter-1] - ak*f.grad
X = cbind(X,X.new)
x.dist = c(x.dist,sum((X.new-X[,iter-1])^2))
}
log.dist = log(sqrt(x.dist))
log.iter = log(1:iter)
ggplot()+
geom_line(aes(log.iter,log.dist),lwd=.75)+
xlab("log(k)")+
ylab("log x dist")
xb = X[,iter]
log.bd = log(sqrt(colSums((X-xb)^2)))
ggplot()+
geom_line(aes(log.iter,log.bd),lwd=.75)+
xlab("log(k)")+
ylab("log optimal dist")
hx = apply(X,2,f)
logh = log(hx)
ggplot()+
geom_line(aes(log.iter,logh),lwd=.75)+
xlab("log(k)")+
ylab("log dist")
?sign
16*1024
ins = c(1175,1183,1327,1581,1592,1624,1777,1924,2483,2642,2713,3419,5350,7615)
ins.dev = ins-1570
ins.sgn = sign(ins.dev)
ins.dev = abs(ins.dev)
Sp = sum(ins.dev[ins.sgn==1])
ins.d = ins-1570
wilcox.test(ins.d,conf.int = T)
ins = c(1175,1183,1327,1581,1592,1624,1777,1924,2483,2642,2713,3419,5350,7615)
ins.dev = ins-1570
ins.sgn = sign(ins.dev)
ins.dev = abs(ins.dev)
Sp = sum(ins.dev[ins.sgn==1])
Sp.samp = rep(0,5000)
for (i in 1:5000) {
rd = rbinom(14,1,.5)
Sp.samp[i] = sum(ins.dev[rd==1])
}
sum(Sp>Sp.samp)
ins = c(1175,1183,1327,1581,1592,1624,1777,1924,2483,2642,2713,3419,5350,7615)
ins.dev = ins-1570
ins.sgn = sign(ins.dev)
ins.dev = abs(ins.dev)
Sp = sum(ins.dev[ins.sgn==1])
Sp.samp = rep(0,5000)
for (i in 1:5000) {
rd = rbinom(14,1,.5)
Sp.samp[i] = sum(ins.dev[rd==1])
}
p.val = 2*(1-sum(Sp>Sp.samp)/length(Sp.samp))
cat("P-value of Pitman's test is", p.val)
1570+16.5
1570+1917
dat = c(21,18,42,29,81,12,94,117,88,210,44,39,11,83,42,94,2,11,33,91,141,48,12,50,61,35,111,73,5,44)
hist(dat)
dat.50 = dat - 50
binom.test(sum(dat.50<0),length(dat.50),p=0.5,alternative = "two-sided")
dat.50 = dat - 50
binom.test(sum(dat.50<0),length(dat.50),p=0.5,alternative = "two.sided")
wilcox.test(dat.50,conf.int = T)
a = 1:3
a[3:3]
choose(3,2)
combn(3,2)
combn(5,2)
combn(5,1)
pair_sum <- function(x){
s = rep(0,2^n)
idx = 1
for (i in 1:n) {
cob = combn(n,i)
for (j in 1:ncol(cob)) {
s[idx] = sum(x[cob[,j]])
}
}
return(s)
}
pair_sum(a)
n = 3
pair_sum(a)
pair_sum <- function(x){
s = rep(0,2^n)
idx = 1
for (i in 1:n) {
cob = combn(n,i)
for (j in 1:ncol(cob)) {
s[idx] = sum(x[cob[,j]])
idx = idx + 1
}
}
return(s)
}
pair_sum(a)
?replicate
pitman.exact <- function(x, mu=0){
x = x - mu
n = length(x)
stat <- function(x){
score = abs(x)
Z = x > 0
wplus = sum(score*Z)
wminus = sum(score*(1-Z))
return(min(wplus,wminus))
}
s = stat(x=x)
pair_sum <- function(x){
s = rep(0,2^n)
idx = 1
for (i in 1:n) {
cob = combn(n,i)
for (j in 1:ncol(cob)) {
s[idx] = sum(x[cob[,j]])
idx = idx + 1
}
}
return(s)
}
s.tot = pair_sum(abs(x))
p = 2*sum(s.tot<=s)
return(p)
}
ins = c(1175,1183,1327,1581,1592,1624,1777,1924,2483,2642,2713,3419,5350,7615)
ins.dev = ins-1570
ins.sgn = sign(ins.dev)
ins.dev = abs(ins.dev)
Sp = sum(ins.dev[ins.sgn==1])
Sp.samp = rep(0,5000)
for (i in 1:5000) {
rd = rbinom(14,1,.5)
Sp.samp[i] = sum(ins.dev[rd==1])
}
p.val = 2*(1-sum(Sp>Sp.samp)/length(Sp.samp))
cat("P-value of Pitman's test is", p.val)
pitman.exact(ins,1570)
pitman.exact <- function(x, mu=0){
x = x - mu
n = length(x)
stat <- function(x){
score = abs(x)
Z = x > 0
wplus = sum(score*Z)
wminus = sum(score*(1-Z))
return(min(wplus,wminus))
}
s = stat(x=x)
pair_sum <- function(x){
s = rep(0,2^n)
idx = 1
for (i in 1:n) {
cob = combn(n,i)
for (j in 1:ncol(cob)) {
s[idx] = sum(x[cob[,j]])
idx = idx + 1
}
}
return(s)
}
s.tot = pair_sum(abs(x))
p = 2*sum(s.tot<=s)/length(s.tot)
return(p)
}
pitman.exact(ins,1570)
library(readxl)
library(tidyverse)
library(cdmTools)
loc = read_excel("cylinder/point.xlsx")
setwd("D:/Programmes/Cyl_kPCA")
loc = read_excel("cylinder/point.xlsx")
X.train = read_excel("cylinder/X.train.xlsx")
Vx.train = read_excel("cylinder/pointx.xlsx")
Vy.train = read_excel("cylinder/pointu2.xlsx")
P.train = read_excel("cylinder/pointp.xlsx")
Vx.dist = dist(Vx.train.mat)
Vx.train.mat = as.matrix(Vx.train)
Vx.dist = dist(Vx.train.mat)
Vx.dist = as.matrix(Vx.dist)
k.gaussian = exp(-Vx.dist)
head(k.gaussian[1,])
min(k.gaussian)
var(k.gaussian)
k.gaussian = k.gaussian - N1%*%k.gaussian - k.gaussian%*%N1 + N1%*%k.gaussian%*%N1
N1 = matrix(rep(1,nrow(k.gaussian)^2),nrow(k.gaussian))
k.gaussian = k.gaussian - N1%*%k.gaussian - k.gaussian%*%N1 + N1%*%k.gaussian%*%N1
Rfast::mat.mult(N1,k.gaussian)
library(tictoc)
tic()
Rfast::mat.mult(N1,k.gaussian)
toc()
tic()
N1%*%k.gaussian
toc()
library(Rfast)
?mat.mult
k.gaussian = exp(-Vx.dist)
N1vec = rep(1,nrow(k.gaussian))
res2 = Crossprod(N1vec, k.gaussian)
N1vec = matrix(rep(1,nrow(k.gaussian)),ncol=1)
res1 = Rfast::mat.mult(N1,k.gaussian)
res2 = matrix(rep(Crossprod(N1vec, k.gaussian),nrow(k.gaussian)),byrow=T)
all(res1==res2)
res2 = matrix(rep(Crossprod(N1vec, k.gaussian),nrow(k.gaussian)),nrow=nrow(k.gaussian),byrow=T)
res1==res2
all(res1==res2)
res2 = matrix(rep(mat.mult(k.gaussian, N1vec),nrow(k.gaussian)),nrow=nrow(k.gaussian),byrow=F)
res1 = mat.mult(N1,k.gaussian)
res1 = mat.mult(k.gaussian,N1)
all(res1 == res2)
K.central <- function(K){
n = nrow(K)
N1vec = matrix(rep(1,n),ncol=1)
m1 = matrix(rep(t(N1vec)%*%K,n),nrow = n,byrow = T)
m2 = matrix(rep(K%*%N1vec,n),nrow = n,byrow = F)
m3 = matrix(rep(m1%*%N1vec,n),nrow = n,byrow = F)
K.new = K-m1-m2+m3
return(K.new)
}
tic()
K = K.central(k.gaussian)
toc()
sigma.sum = psych::tr(K)
K.svd = irlba::irlba(K,10)
which(cumsum(K.svd$d)/sigma.sum>0.99)[1]
K.svd$d
Vx.train.svd = svd(Vx.train)
head(Vx.train.svd$d)
View(K)
View(k.gaussian)
K.central <- function(K){
n = nrow(K)
N1vec = matrix(rep(1/n,n),ncol=1)
m1 = matrix(rep(t(N1vec)%*%K,n),nrow = n,byrow = T)
m2 = matrix(rep(K%*%N1vec,n),nrow = n,byrow = F)
m3 = matrix(rep(m1%*%N1vec,n),nrow = n,byrow = F)
K.new = K-m1-m2+m3
return(K.new)
}
K = K.central(k.gaussian)
sigma.sum = psych::tr(K)
K.svd = irlba::irlba(K,10)
which(cumsum(K.svd$d)/sigma.sum>0.99)[1]
K.svd$d
sigma.sum
K.svd = irlba::irlba(K,20)
which(cumsum(K.svd$d)/sigma.sum>0.99)[1]
sum(K.svd$d)
K.svd = svd(K)
which(cumsum(K.svd$d)/sigma.sum>0.99)[1]
