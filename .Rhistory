ins.dev = ins-1570
ins.sgn = sign(ins.dev)
ins.dev = abs(ins.dev)
Sp = sum(ins.dev[ins.sgn==1])
Sp.samp = rep(0,5000)
for (i in 1:5000) {
rd = rbinom(14,1,.5)
Sp.samp[i] = sum(ins.dev[rd==1])
}
p.val = 2*(1-sum(Sp>Sp.samp)/length(Sp.samp))
cat("P-value of Pitman's test is", p.val)
boxplot(ins)
hist(ins)
ins = c(1175,1183,1327,1581,1592,1624,1777,1924,2483,2642,2713,3419,5350,7615)
hist(ins)
ins = c(1175,1183,1327,1581,1592,1624,1777,1924,2483,2642,2713,3419,5350,7615)
hist(ins)
?binom.test
ins.dev = ins-1570
pos = sum(ins.dev>0)
binom.test(pos,length(ins),p=0.5,alternative = "two.sided")
??SIGNtest
ins.dev = ins-1570
pos = sum(ins.dev>0)
BSDA::SIGN.test(pos,length(ins),p=0.5,alternative = "two.sided")
ins.dev = ins-1570
BSDA::SIGN.test(ins.dev,alternative = "two.sided")
dat = c(21,18,42,29,81,12,94,117,88,210,44,39,11,83,42,94,2,11,33,91,141,48,12,50,61,35,111,73,5,44,6,11,35,91,147,83,91,48,22,17)
hist(dat)
dat.50 = dat - 50
binom.test(sum(dat.50<0),length(dat.50),p=0.5,alternative = "two.sided")
wilcox.test(dat.50,conf.int = T)
source("D:/Programmes/Covariate-Assisted-Spectral-GoM/GoM_spectra.R")
library(gtools)
library(irlba)
library(doSNOW)
cl = makeCluster(6L)
registerDoSNOW(cl)
cl = makeCluster(6L)
?makeCluster
cl = parallel::makeCluster(6L)
cl = snow::makeCluster(6L)
cl = snow::makeCluster(6L, setup_strategy = "sequential")
cl = snow::makeCluster(6, setup_strategy = "sequential")
source("D:/Programmes/Covariate-Assisted-Spectral-GoM/GoM_spectra.R")
library(gtools)
library(irlba)
library(doSNOW)
cl = makeCluster(6L)
registerDoSNOW(cl)
## Binary Matrix
## Missing
K = 3
N = 100
J = 5000
p.seq = seq(from=0.02,to=0.5,length=10)
cal_missing_err <- function(p,X_t,Pi){
X = matrix(rbinom(N*J,1,X_t),nrow=N)
# X[X==0] = -1
Missing = matrix(rbinom(N*J,1,p),nrow=N)
X[Missing==0] = 0
svd.est = gom.svd.noprune(X/p,K)
idx.svd = find_best_idx(K,svd.est$Pi,Pi)
hollow.est = gom.hollow.noprune(X/p,K)
idx.hollow = find_best_idx(K,hollow.est$Pi,Pi)
hetero.est = gom.hetero.noprune(X/p,K)
idx.hetero = find_best_idx(K,hetero.est$Pi,Pi)
# err.svd = mean(abs(svd.est$Pi[,idx.svd]-Pi))
# err.hollow = mean(abs(hollow.est$Pi[,idx.hollow]-Pi))
# err.hetero = mean(abs(hetero.est$Pi[,idx.hetero]-Pi))
err.svd = max(apply(svd.est$Pi[,idx.svd]-Pi,1,norm,"2"))
err.hollow = max(apply(hollow.est$Pi[,idx.hollow]-Pi,1,norm,"2"))
err.hetero = max(apply(hetero.est$Pi[,idx.hetero]-Pi,1,norm,"2"))
return(list(err.svd=err.svd,err.hollow=err.hollow,err.hetero=err.hetero))
}
res = foreach(i=1:100, .packages = "gtools") %dopar% {
set.seed(i)
Pi = rdirichlet(N,rep(1,K))
Pi[1:K,] = diag(rep(1,K))
Theta = matrix(rbeta(J*K,1,1),ncol=K)
X_t = Pi%*%t(Theta)
err = lapply(p.seq,cal_missing_err,X_t,Pi)
return(err)
}
err.svd = matrix(rep(0,length(p.seq)*100),nrow=100)
err.hollow = matrix(rep(0,length(p.seq)*100),nrow=100)
err.hetero = matrix(rep(0,length(p.seq)*100),nrow=100)
for (i in 1:100) {
for (j in 1:length(p.seq)) {
err.svd[i,j] = res[[i]][[j]]$err.svd
err.hollow[i,j] = res[[i]][[j]]$err.hollow
err.hetero[i,j] = res[[i]][[j]]$err.hetero
}
}
library(tidyverse)
err.df.svd = data.frame(p.seq,t(err.svd))
err.df.svd2 = err.df.svd %>% pivot_longer(-p.seq,values_to = "err")
err.df.svd2$name = "SVD"
err.df.hollow = data.frame(p.seq,t(err.hollow))
err.df.hollow2 = err.df.hollow %>% pivot_longer(-p.seq,values_to = "err")
err.df.hollow2$name = "Hollow"
err.df.hetero = data.frame(p.seq,t(err.hetero))
err.df.hetero2 = err.df.hetero %>% pivot_longer(-p.seq,values_to = "err")
err.df.hetero2$name = "Hetero"
err.df3 = rbind(err.df.svd2,err.df.hollow2,err.df.hetero2)
colnames(err.df3)[1] = "p"
err.df3$p = as.factor(round(err.df3$p,2))
ggplot(err.df3,aes(x=p,y=err,fill=name))+
geom_boxplot()+
labs(title="Different Missingness for Binary Response")
res = foreach(i=1:100, .packages = "gtools") %dopar% {
set.seed(i)
Pi = rdirichlet(N,rep(1,K))
Pi[1:K,] = diag(rep(1,K))
Theta = matrix(rbeta(J*K,100,100),ncol=K)
X_t = Pi%*%t(Theta)
err = lapply(p.seq,cal_missing_err,X_t,Pi)
return(err)
}
err.svd = matrix(rep(0,length(p.seq)*100),nrow=100)
err.hollow = matrix(rep(0,length(p.seq)*100),nrow=100)
err.hetero = matrix(rep(0,length(p.seq)*100),nrow=100)
for (i in 1:100) {
for (j in 1:length(p.seq)) {
err.svd[i,j] = res[[i]][[j]]$err.svd
err.hollow[i,j] = res[[i]][[j]]$err.hollow
err.hetero[i,j] = res[[i]][[j]]$err.hetero
}
}
library(tidyverse)
err.df.svd = data.frame(p.seq,t(err.svd))
err.df.svd2 = err.df.svd %>% pivot_longer(-p.seq,values_to = "err")
err.df.svd2$name = "SVD"
err.df.hollow = data.frame(p.seq,t(err.hollow))
err.df.hollow2 = err.df.hollow %>% pivot_longer(-p.seq,values_to = "err")
err.df.hollow2$name = "Hollow"
err.df.hetero = data.frame(p.seq,t(err.hetero))
err.df.hetero2 = err.df.hetero %>% pivot_longer(-p.seq,values_to = "err")
err.df.hetero2$name = "Hetero"
err.df3 = rbind(err.df.svd2,err.df.hollow2,err.df.hetero2)
colnames(err.df3)[1] = "p"
err.df3$p = as.factor(round(err.df3$p,2))
ggplot(err.df3,aes(x=p,y=err,fill=name))+
geom_boxplot()+
labs(title="Different Missingness for Binary Response")
## Poisson Matrix
## Missing
K = 3
N = 100
J = 5000
p.seq = seq(from=0.02,to=0.5,length=10)
cal_missing_err <- function(p,X_t,Pi){
X = matrix(rpois(N*J,X_t),nrow=N)
# X[X==0] = -1
Missing = matrix(rbinom(N*J,1,p),nrow=N)
X[Missing==0] = 0
svd.est = gom.svd(X/p,K)
idx.svd = find_best_idx(K,svd.est$Pi,Pi)
hollow.est = gom.hollow(X/p,K)
idx.hollow = find_best_idx(K,hollow.est$Pi,Pi)
hetero.est = gom.hetero(X/p,K)
idx.hetero = find_best_idx(K,hetero.est$Pi,Pi)
err.svd = mean(abs(svd.est$Pi[,idx.svd]-Pi))
err.hollow = mean(abs(hollow.est$Pi[,idx.hollow]-Pi))
err.hetero = mean(abs(hetero.est$Pi[,idx.hetero]-Pi))
return(list(err.svd=err.svd,err.hollow=err.hollow,err.hetero=err.hetero))
}
res = foreach(i=1:100, .packages = "gtools") %dopar% {
set.seed(i)
Pi = rdirichlet(N,rep(1,K))
Pi[1:K,] = diag(rep(1,K))
Theta = matrix(rgamma(J*K,9,0.5),ncol=K)
X_t = Pi%*%t(Theta)
err = lapply(p.seq,cal_missing_err,X_t,Pi)
return(err)
}
err.svd = matrix(rep(0,length(p.seq)*100),nrow=100)
err.hollow = matrix(rep(0,length(p.seq)*100),nrow=100)
err.hetero = matrix(rep(0,length(p.seq)*100),nrow=100)
for (i in 1:100) {
for (j in 1:length(p.seq)) {
err.svd[i,j] = res[[i]][[j]]$err.svd
err.hollow[i,j] = res[[i]][[j]]$err.hollow
err.hetero[i,j] = res[[i]][[j]]$err.hetero
}
}
boxplot(err.svd)
boxplot(err.hollow)
library(tidyverse)
err.df.svd = data.frame(p.seq,t(err.svd))
err.df.svd2 = err.df.svd %>% pivot_longer(-p.seq,values_to = "err")
err.df.svd2$name = "SVD"
err.df.hollow = data.frame(p.seq,t(err.hollow))
err.df.hollow2 = err.df.hollow %>% pivot_longer(-p.seq,values_to = "err")
err.df.hollow2$name = "Hollow"
err.df.hetero = data.frame(p.seq,t(err.hetero))
err.df.hetero2 = err.df.hetero %>% pivot_longer(-p.seq,values_to = "err")
err.df.hetero2$name = "Hetero"
err.df3 = rbind(err.df.svd2,err.df.hollow2,err.df.hetero2)
colnames(err.df3)[1] = "p"
err.df3$p = as.factor(round(err.df3$p,2))
ggplot(err.df3,aes(x=p,y=err,fill=name))+
geom_boxplot()+
labs(title="Different Missingness for Poisson Response")
library(BART)
?wbart
biom <- c(11,6,14,13,18,14,11,22,19,19,25,24,38,19,25,31,19)
n = length(biom)
## It is even
biom.diff = biom[(n/2+1):n]-biom[1:(n/2)]
neg.num = sum(biom.diff<0)
binom.test(neg.num,n)
score = c(62,69,55,71,64,68,72,75,49,74,81,83,77,79,89,42)
score.diff = diff(score)
n = length(score.diff)
num.neg = sum(score.diff<0)
binom.test(num.neg,n)
score = c(62,69,55,71,64,68,72,75,49,74,81,83,77,79,89,42)
score.diff = diff(score)
score.diff<0
score = c(62,69,55,71,64,68,72,75,49,74,81,83,77,79,89,42)
score.diff = diff(score)
score.diff<0
sum(score.diff<0)
sum(score.diff>0)
R = 10
n = 5
m = 10
N = 15
ER = 1+2*n*m/N
VarR = 2*n*m*(2*n*m-N)/N^2/(N-1)
Z = (R-ER)/sqrt(VarR)
pval = 2*pnorm(Z,lower.tail = F)
cat("The p-value is", pval)
R = 5
p = c(1/2,1/6,1/3)
N = 12
ER = N*(1-sum(p^2))+1
VR = N*(sum(p^2)-2*sum(p^3)+sum(p^2)^2)
ER
R = 5
p = c(1/2,1/6,1/3)
N = 12
ER = N*(1-sum(p^2))+1
VR = N*(sum(p^2)-2*sum(p^3)+sum(p^2)^2)
Z = (R-ER)/sqrt(VR)
pval = 2*pnorm(Z)
cat("The p-value is", pval)
# the win, draw and lose and respectively coded as 1, 0, -1
cal_R <- function(x){
x.diff = diff(x)
res = 1 + sum(x.diff != 0)
return(res)
}
sim_R <- function(x){
seq = sample(c(-1,0,1),N,replace = T)
R = cal_R(seq)
return(R)
}
R.dis = rep(0, 1e4)
R.dis = sapply(R.dis,cal_R)
summary(as.factor(R.dis))
R.dis
seq = sample(c(-1,0,1),N,replace = T)
seq
x = seq
x.diff = diff(x)
x.diff
sum(x.diff != 0)
res = 1 + sum(x.diff != 0)
R = cal_R(seq)
R
return(R)
# the win, draw and lose and respectively coded as 1, 0, -1
cal_R <- function(x){
x.diff = diff(x)
res = 1 + sum(x.diff != 0)
return(res)
}
sim_R <- function(x){
seq = sample(c(-1,0,1),N,replace = T)
R = cal_R(seq)
return(R)
}
R.dis = rep(0, 1e4)
R.dis = sapply(R.dis,cal_R)
summary(as.factor(R.dis))
R.dis
sim_R()
# the win, draw and lose and respectively coded as 1, 0, -1
cal_R <- function(x){
x.diff = diff(x)
res = 1 + sum(x.diff != 0)
return(res)
}
sim_R <- function(){
seq = sample(c(-1,0,1),N,replace = T)
R = cal_R(seq)
return(R)
}
R.dis = replicate(1e4,simR)
# the win, draw and lose and respectively coded as 1, 0, -1
cal_R <- function(x){
x.diff = diff(x)
res = 1 + sum(x.diff != 0)
return(res)
}
sim_R <- function(){
seq = sample(c(-1,0,1),N,replace = T)
R = cal_R(seq)
return(R)
}
R.dis = replicate(1e4,sim_R)
# R.dis = sapply(R.dis,cal_R)
summary(as.factor(R.dis))
# the win, draw and lose and respectively coded as 1, 0, -1
cal_R <- function(x){
x.diff = diff(x)
res = 1 + sum(x.diff != 0)
return(res)
}
sim_R <- function(){
seq = sample(c(-1,0,1),N,replace = T)
R = cal_R(seq)
return(R)
}
R.dis = replicate(1e4,sim_R())
# R.dis = sapply(R.dis,cal_R)
summary(as.factor(R.dis))
p = sum(R.dis<=5)/length(R.dis)
p = sum(R.dis<=5)/length(R.dis)
p
(295+75+12+1)/1e4
# the win, draw and lose and respectively coded as 1, 0, -1
cal_R <- function(x){
x.diff = diff(x)
res = 1 + sum(x.diff != 0)
return(res)
}
sim_R <- function(){
seq = sample(c(-1,0,1),N,replace = T)
R = cal_R(seq)
return(R)
}
set.seed(20231222)
R.dis = replicate(1e4,sim_R())
summary(as.factor(R.dis))
p = sum(R.dis<=5)/length(R.dis)
p
library(tidyverse)
q <- seq(from=0.15,to=0.50,length=6)
??TeX
library(latex2exp)
h <- c(2.69,4.19,5.31,5.63,5.94,6.38)
kuosan <- data.frame(q,h)
ggplot(kuosan,aes(x=q,y=h))+
geom_point()+
geom_line(lwd=.75)+
labs(title = "火焰高度与流量关系图")+
xlab(TeX("q/$L\\cdot min^{-1}$"))+
ylab(TeX("h/$cm$"))
Phi = c(9.52,6.8,5.29,4.33,3.66,3.17,2.8)
alpha = c(24,27.5,30.0,36.0,49.0,54.0,56.0)
yuhun = data.frame(Phi,alpha)
liuliang = seq(from=0.5,to=1.7,length=7)+.5
vu = liuliang/(1/4*3.1415926*(2*10^(-2))^2)*10^(-3)/60
alphar = alpha/180*3.1415926
sl = vu*cos(alphar)
yuhun = data.frame(Phi,sl)
ggplot(yuhun,aes(x=Phi,y=sl))+
geom_point()+
geom_line(lwd=.75)+
labs(title = "火焰传播速度")
ggplot(yuhun,aes(x=Phi,y=sl))+
geom_point()+
geom_line(lwd=.75)+
labs(title = "火焰传播速度")+
ylab(TeX("$S_L/m\\cdot s$"))+
xlab(TeX("$\\Phi$"))
sl*100
biom <- c(11,6,14,13,18,14,11,22,19,19,25,24,38,19,25,31,19)
n = length(biom)
## It is even
biom.diff = biom[(n/2+1):n]-biom[1:(n/2)]
neg.num = sum(biom.diff<0)
binom.test(neg.num,n/2)
biom <- c(11,6,14,13,18,14,11,22,19,19,25,24,38,19,25,31,19)
n = length(biom)
## It is even
biom.diff = biom[(n/2+1):n]-biom[1:(n/2)]
neg.num = sum(biom.diff<0)
binom.test(neg.num,length(biom.diff))
R = 5
p = c(1/2,1/6,1/3)
N = 12
ER = N*(1-sum(p^2))+1
VR = N*(sum(p^2)-2*sum(p^3)+sum(p^2)^2)
Z = (R-ER)/sqrt(VR)
pval = pnorm(Z)
cat("The p-value is", pval)
biom <- c(11,6,14,13,18,14,11,22,19,19,25,24,38,19,25,31,19)
n = length(biom)
## It is even
biom.diff = biom[(n/2+1):n]-biom[1:(n/2)]
neg.num = sum(biom.diff<0)
binom.test(neg.num,length(biom.diff))
score = c(62,69,55,71,64,68,72,75,49,74,81,83,77,79,89,42)
score.diff = diff(score)
score.diff<0
R = 10
n = 5
m = 10
N = 15
ER = 1+2*n*m/N
VarR = 2*n*m*(2*n*m-N)/N^2/(N-1)
Z = (R-ER)/sqrt(VarR)
pval = 2*pnorm(Z,lower.tail = F)
cat("The p-value is", pval)
R = 5
p = c(1/2,1/6,1/3)
N = 12
ER = N*(1-sum(p^2))+1
VR = N*(sum(p^2)-2*sum(p^3)+sum(p^2)^2)
Z = (R-ER)/sqrt(VR)
pval = pnorm(Z)
cat("The p-value is", pval)
# the win, draw and lose and respectively coded as 1, 0, -1
cal_R <- function(x){
x.diff = diff(x)
res = 1 + sum(x.diff != 0)
return(res)
}
sim_R <- function(){
seq = sample(c(rep(-1,4),rep(0,2),rep(1,6)),N)
R = cal_R(seq)
return(R)
}
set.seed(20231222)
R.dis = replicate(1e4,sim_R())
summary(as.factor(R.dis))
p = sum(R.dis<=5)/length(R.dis)
p
library(readxl)
library(tidyverse)
library(cdmTools)
library(Rfast)
loc = read_excel("cylinder/point.xlsx")
setwd("D:/Programmes/Cyl_kPCA")
loc = read_excel("cylinder/point.xlsx")
X.train = read_excel("cylinder/X.train.xlsx")
Vx.train = read_excel("cylinder/pointx.xlsx")
Vy.train = read_excel("cylinder/pointu2.xlsx")
P.train = read_excel("cylinder/pointp.xlsx")
Vx.train.mat = as.matrix(Vx.train)
Vx.dist = dist(Vx.train.mat)
Vx.dist = as.matrix(Vx.dist)
k.gaussian = exp(-Vx.dist/100)
K.central <- function(K){
n = nrow(K)
N1vec = matrix(rep(1/n,n),ncol=1)
m1 = matrix(rep(t(N1vec)%*%K,n),nrow = n,byrow = T)
m2 = matrix(rep(K%*%N1vec,n),nrow = n,byrow = F)
m3 = matrix(rep(m1%*%N1vec,n),nrow = n,byrow = F)
K.new = K-m1-m2+m3
return(K.new)
}
K = K.central(k.gaussian)
sigma.sum = psych::tr(K)
K.evd = eigen(K)
K.evd$proportion = K.evd$values/sigma.sum
K.evd$idx = 1:nrow(K.evd)
K.evd$idx = 1:nrow(K.evd$vectors)
K.evd$explianed = cumsum(K.evd$proportion)
ggplot(K.evd,aes(idx,proportion))+
geom_point()+
geom_line(lwd=.75)
K.df = data.frame(K.evd)
K.df = data.frame(K.evd$idx,K.evd$proportion,K.evd$explianed)
colnames(K.df) = c("idx","proportion","explained")
ggplot(K.df,aes(idx,proportion))+
geom_point()+
geom_line(lwd=.75)
ggplot(K.df,aes(idx[1:1000],proportion[1:1000]))+
geom_point()+
geom_line(lwd=.75)
ggplot(K.df[1:1000,],aes(idx,proportion))+
geom_point()+
geom_line(lwd=.75)
ggplot(K.df[1:200,],aes(idx,proportion))+
geom_point()+
geom_line(lwd=.75)
ggplot(K.df[1:200,],aes(idx,explained))+
geom_point()+
geom_line(lwd=.75)
ggplot(K.df[1:200,],aes(idx,explained))+
geom_point()+
geom_line(lwd=.75)+
geom_hline(yintercept = .75, col="red", lty = 1)
ggplot(K.df[1:200,],aes(idx,explained))+
geom_point()+
geom_line(lwd=.75)+
geom_hline(yintercept = .95, col="red", lty = 2)
ggplot(K.df[1:200,],aes(idx,explained))+
geom_point()+
geom_line(lwd=.75)+
geom_hline(yintercept = .95, col="blue", lty = 2)
ggplot(K.df[1:200,],aes(idx,explained))+
geom_point()+
geom_line(lwd=.75)+
geom_hline(yintercept = .95, col="blue", lty = 2)+
ylab("Explained Proportion")+
xlab("Number of Principal Components")
