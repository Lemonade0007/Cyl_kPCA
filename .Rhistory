x.new = sapply(x, proj)
return(x.new)
}
cri = abs(h(X[,1]))
while (cri >= 1e-5) {
iter = iter + 1
f.grad = grad_f(X[,iter-1])
x.new = X[,iter-1] - alpha*f.grad
x.new = prox_proj(x.new)
X = cbind(X,x.new)
cri = abs(h(X[,iter])-h(X[,iter-1]))
}
?diff
library(tidyverse)
install.packages("latex2exp")
library(latex2exp)
xb = X[,iter]
log.xdist = log(colSums((X-xb)^2))
log.iter = log(1:iter)
res.h = apply(X,2,h)
log.h = log(res.h)
log.hdist = log(-diff(res.h))
ggplot()+
geom_line(aes(log.iter,log.xdist),lwd=.75)+
ylab(TeX("$\log(\|x_k-x^*\|_2)$"))+
xb = X[,iter]
log.xdist = log(colSums((X-xb)^2))
log.iter = log(1:iter)
res.h = apply(X,2,h)
log.h = log(res.h)
log.hdist = log(-diff(res.h))
ggplot()+
geom_line(aes(log.iter,log.xdist),lwd=.75)+
ylab(TeX("$\log (\| x_k -x^* \|_2)$"))+
xb = X[,iter]
log.xdist = log(colSums((X-xb)^2))
log.iter = log(1:iter)
res.h = apply(X,2,h)
log.h = log(res.h)
log.hdist = log(-diff(res.h))
ggplot()+
geom_line(aes(log.iter,log.xdist),lwd=.75)+
ylab(TeX("$\log (\| x_k -x^* \|_2)$"))+
xb = X[,iter]
log.xdist = log(colSums((X-xb)^2))
log.iter = log(1:iter)
res.h = apply(X,2,h)
log.h = log(res.h)
log.hdist = log(-diff(res.h))
ggplot()+
geom_line(aes(log.iter,log.xdist),lwd=.75)+
ylab(TeX("$\\log (\\| x_k -x^* \\|_2)$"))+
xlab(TeX("$\\log (k)$"))
ggplot()+
geom_line(aes(log.iter,log.h),lwd=.75)+
ylab(TeX("$\\log(h(x_k))$"))+
xlab(TeX("$\\log(k)$"))
ggplot()+
geom_line(aes(log.iter[1:(iter-1)],log.hdist),lwd=.75)+
ylab(TeX("$\\log(h(x_{k-1})-h(x_k))$"))+
xlab(TeX("$\\log(k)$"))
M = svd(A2)$d[1]^2
alpha = 1/M
X = matrix(rep(0,ncol(A2)),ncol = 1)
iter = 1
grad_f <- function(x){
t(A2)%*%A2%*%x - t(A2)%*%b1
}
f <- function(x){
sum((A2%*%x-b2)^2)/2
}
g <- function(x){
sum(abs(x))
}
h <- function(x){
f(x) + g(x)
}
prox_proj <- function(x){
proj <- function(x){
if (x > alpha){
return(x - alpha)
} else if (x < -alpha){
return(x + alpha)
} else {
return(0)
}
}
x.new = sapply(x, proj)
return(x.new)
}
cri = abs(h(X[,1]))
while (cri >= 1e-5) {
iter = iter + 1
f.grad = grad_f(X[,iter-1])
x.new = X[,iter-1] - alpha*f.grad
x.new = prox_proj(x.new)
X = cbind(X,x.new)
cri = abs(h(X[,iter])-h(X[,iter-1]))
}
M = svd(A2)$d[1]^2
alpha = 1/M
X = matrix(rep(0,ncol(A2)),ncol = 1)
iter = 1
grad_f <- function(x){
t(A2)%*%A2%*%x - t(A2)%*%b2
}
f <- function(x){
sum((A2%*%x-b2)^2)/2
}
g <- function(x){
sum(abs(x))
}
h <- function(x){
f(x) + g(x)
}
prox_proj <- function(x){
proj <- function(x){
if (x > alpha){
return(x - alpha)
} else if (x < -alpha){
return(x + alpha)
} else {
return(0)
}
}
x.new = sapply(x, proj)
return(x.new)
}
cri = abs(h(X[,1]))
while (cri >= 1e-5) {
iter = iter + 1
f.grad = grad_f(X[,iter-1])
x.new = X[,iter-1] - alpha*f.grad
x.new = prox_proj(x.new)
X = cbind(X,x.new)
cri = abs(h(X[,iter])-h(X[,iter-1]))
}
xb = X[,iter]
M = svd(A2)$d[1]^2
M = svd(A1)$d[1]^2
boxplot(svd(A2)$d)
M = svd(A2)$d[1]^2
alpha = 1/M
X = matrix(rep(0,ncol(A2)),ncol = 1)
iter = 1
grad_f <- function(x){
t(A2)%*%A2%*%x - t(A2)%*%b2
}
f <- function(x){
sum((A2%*%x-b2)^2)/2
}
g <- function(x){
sum(abs(x))
}
h <- function(x){
f(x) + g(x)
}
prox_proj <- function(x){
proj <- function(x){
if (x > alpha){
return(x - alpha)
} else if (x < -alpha){
return(x + alpha)
} else {
return(0)
}
}
x.new = sapply(x, proj)
return(x.new)
}
cri = abs(h(X[,1]))
while (cri >= 1e-5 & iter <= 1e6) {
iter = iter + 1
f.grad = grad_f(X[,iter-1])
x.new = X[,iter-1] - alpha*f.grad
x.new = prox_proj(x.new)
X = cbind(X,x.new)
cri = abs(h(X[,iter])-h(X[,iter-1]))
}
xb = X[,iter]
xb = X[,iter-1]
log.xdist = log(colSums((X-xb)^2))
log.iter = log(1:iter)
res.h = apply(X,2,h)
log.h = log(res.h)
log.hdist = log(-diff(res.h))
ggplot()+
geom_line(aes(log.iter,log.xdist),lwd=.75)+
ylab(TeX("$\\log (\\| x_k -x^* \\|_2)$"))+
xlab(TeX("$\\log (k)$"))
xb = X[,iter-1]
log.xdist = log(colSums((X-xb)^2))
log.iter = log(1:(iter-1))
res.h = apply(X,2,h)
log.h = log(res.h)
log.hdist = log(-diff(res.h))
ggplot()+
geom_line(aes(log.iter,log.xdist),lwd=.75)+
ylab(TeX("$\\log (\\| x_k -x^* \\|_2)$"))+
xlab(TeX("$\\log (k)$"))
ggplot()+
geom_line(aes(log.iter,log.h),lwd=.75)+
ylab(TeX("$\\log(h(x_k))$"))+
xlab(TeX("$\\log(k)$"))
ggplot()+
geom_line(aes(log.iter[1:(iter-1)],log.hdist),lwd=.75)+
ylab(TeX("$\\log(h(x_{k-1})-h(x_k))$"))+
xlab(TeX("$\\log(k)$"))
xb = X[,iter-1]
log.xdist = log(colSums((X-xb)^2))
log.iter = log(1:(iter-1))
res.h = apply(X,2,h)
log.h = log(res.h)
log.hdist = log(-diff(res.h))
ggplot()+
geom_line(aes(log.iter,log.xdist),lwd=.75)+
ylab(TeX("$\\log (\\| x_k -x^* \\|_2)$"))+
xlab(TeX("$\\log (k)$"))
ggplot()+
geom_line(aes(log.iter,log.h),lwd=.75)+
ylab(TeX("$\\log(h(x_k))$"))+
xlab(TeX("$\\log(k)$"))
ggplot()+
geom_line(aes(log.iter[1:(iter-2)],log.hdist),lwd=.75)+
ylab(TeX("$\\log(h(x_{k-1})-h(x_k))$"))+
xlab(TeX("$\\log(k)$"))
iter = iter - 1
while (cri >= 1e-5 & iter <= 1e5) {
iter = iter + 1
f.grad = grad_f(X[,iter-1])
x.new = X[,iter-1] - alpha*f.grad
x.new = prox_proj(x.new)
X = cbind(X,x.new)
cri = abs(h(X[,iter])-h(X[,iter-1]))
}
xb = X[,iter-1]
log.xdist = log(colSums((X-xb)^2))
log.iter = log(1:(iter-1))
res.h = apply(X,2,h)
log.h = log(res.h)
log.hdist = log(-diff(res.h))
ggplot()+
geom_line(aes(log.iter,log.xdist),lwd=.75)+
ylab(TeX("$\\log (\\| x_k -x^* \\|_2)$"))+
xlab(TeX("$\\log (k)$"))
ggplot()+
geom_line(aes(log.iter,log.h),lwd=.75)+
ylab(TeX("$\\log(h(x_k))$"))+
xlab(TeX("$\\log(k)$"))
ggplot()+
geom_line(aes(log.iter[1:(iter-2)],log.hdist),lwd=.75)+
ylab(TeX("$\\log(h(x_{k-1})-h(x_k))$"))+
xlab(TeX("$\\log(k)$"))
cri
M = svd(A2)$d[1]^2
alpha = 1/M
X = matrix(rep(0,ncol(A2)),ncol = 1)
iter = 1
grad_f <- function(x){
t(A2)%*%A2%*%x - t(A2)%*%b2
}
f <- function(x){
sum((A2%*%x-b2)^2)/2
}
g <- function(x){
sum(abs(x))
}
h <- function(x){
f(x) + g(x)
}
prox_proj <- function(x){
proj <- function(x){
if (x > alpha){
return(x - alpha)
} else if (x < -alpha){
return(x + alpha)
} else {
return(0)
}
}
x.new = sapply(x, proj)
return(x.new)
}
cri = abs(h(X[,1]))
while (cri >= 1e-5 & iter <= 1e5) {
iter = iter + 1
f.grad = grad_f(X[,iter-1])
x.new = X[,iter-1] - alpha*f.grad
x.new = prox_proj(x.new)
X = cbind(X,x.new)
cri = abs(h(X[,iter])-h(X[,iter-1]))
}
ins = c(1175,1183,1327,1581,1592,1624,1777,1924,2483,2642,2713,3419,5350,7615)
ins.dev = ins-1570
ins.sgn = sign(ins.dev)
ins.dev = abs(ins.dev)
Sp = sum(ins.dev[ins.sgn==1])
Sp.samp = rep(0,5000)
for (i in 1:5000) {
rd = rbinom(14,1,.5)
Sp.samp[i] = sum(ins.dev[rd==1])
}
p.val = 2*(1-sum(Sp>Sp.samp)/length(Sp.samp))
cat("P-value of Pitman's test is", p.val)
boxplot(ins)
hist(ins)
ins = c(1175,1183,1327,1581,1592,1624,1777,1924,2483,2642,2713,3419,5350,7615)
hist(ins)
ins = c(1175,1183,1327,1581,1592,1624,1777,1924,2483,2642,2713,3419,5350,7615)
hist(ins)
?binom.test
ins.dev = ins-1570
pos = sum(ins.dev>0)
binom.test(pos,length(ins),p=0.5,alternative = "two.sided")
??SIGNtest
ins.dev = ins-1570
pos = sum(ins.dev>0)
BSDA::SIGN.test(pos,length(ins),p=0.5,alternative = "two.sided")
ins.dev = ins-1570
BSDA::SIGN.test(ins.dev,alternative = "two.sided")
dat = c(21,18,42,29,81,12,94,117,88,210,44,39,11,83,42,94,2,11,33,91,141,48,12,50,61,35,111,73,5,44,6,11,35,91,147,83,91,48,22,17)
hist(dat)
dat.50 = dat - 50
binom.test(sum(dat.50<0),length(dat.50),p=0.5,alternative = "two.sided")
wilcox.test(dat.50,conf.int = T)
source("D:/Programmes/Covariate-Assisted-Spectral-GoM/GoM_spectra.R")
library(gtools)
library(irlba)
library(doSNOW)
cl = makeCluster(6L)
registerDoSNOW(cl)
cl = makeCluster(6L)
?makeCluster
cl = parallel::makeCluster(6L)
cl = snow::makeCluster(6L)
cl = snow::makeCluster(6L, setup_strategy = "sequential")
cl = snow::makeCluster(6, setup_strategy = "sequential")
source("D:/Programmes/Covariate-Assisted-Spectral-GoM/GoM_spectra.R")
library(gtools)
library(irlba)
library(doSNOW)
cl = makeCluster(6L)
registerDoSNOW(cl)
## Binary Matrix
## Missing
K = 3
N = 100
J = 5000
p.seq = seq(from=0.02,to=0.5,length=10)
cal_missing_err <- function(p,X_t,Pi){
X = matrix(rbinom(N*J,1,X_t),nrow=N)
# X[X==0] = -1
Missing = matrix(rbinom(N*J,1,p),nrow=N)
X[Missing==0] = 0
svd.est = gom.svd.noprune(X/p,K)
idx.svd = find_best_idx(K,svd.est$Pi,Pi)
hollow.est = gom.hollow.noprune(X/p,K)
idx.hollow = find_best_idx(K,hollow.est$Pi,Pi)
hetero.est = gom.hetero.noprune(X/p,K)
idx.hetero = find_best_idx(K,hetero.est$Pi,Pi)
# err.svd = mean(abs(svd.est$Pi[,idx.svd]-Pi))
# err.hollow = mean(abs(hollow.est$Pi[,idx.hollow]-Pi))
# err.hetero = mean(abs(hetero.est$Pi[,idx.hetero]-Pi))
err.svd = max(apply(svd.est$Pi[,idx.svd]-Pi,1,norm,"2"))
err.hollow = max(apply(hollow.est$Pi[,idx.hollow]-Pi,1,norm,"2"))
err.hetero = max(apply(hetero.est$Pi[,idx.hetero]-Pi,1,norm,"2"))
return(list(err.svd=err.svd,err.hollow=err.hollow,err.hetero=err.hetero))
}
res = foreach(i=1:100, .packages = "gtools") %dopar% {
set.seed(i)
Pi = rdirichlet(N,rep(1,K))
Pi[1:K,] = diag(rep(1,K))
Theta = matrix(rbeta(J*K,1,1),ncol=K)
X_t = Pi%*%t(Theta)
err = lapply(p.seq,cal_missing_err,X_t,Pi)
return(err)
}
err.svd = matrix(rep(0,length(p.seq)*100),nrow=100)
err.hollow = matrix(rep(0,length(p.seq)*100),nrow=100)
err.hetero = matrix(rep(0,length(p.seq)*100),nrow=100)
for (i in 1:100) {
for (j in 1:length(p.seq)) {
err.svd[i,j] = res[[i]][[j]]$err.svd
err.hollow[i,j] = res[[i]][[j]]$err.hollow
err.hetero[i,j] = res[[i]][[j]]$err.hetero
}
}
library(tidyverse)
err.df.svd = data.frame(p.seq,t(err.svd))
err.df.svd2 = err.df.svd %>% pivot_longer(-p.seq,values_to = "err")
err.df.svd2$name = "SVD"
err.df.hollow = data.frame(p.seq,t(err.hollow))
err.df.hollow2 = err.df.hollow %>% pivot_longer(-p.seq,values_to = "err")
err.df.hollow2$name = "Hollow"
err.df.hetero = data.frame(p.seq,t(err.hetero))
err.df.hetero2 = err.df.hetero %>% pivot_longer(-p.seq,values_to = "err")
err.df.hetero2$name = "Hetero"
err.df3 = rbind(err.df.svd2,err.df.hollow2,err.df.hetero2)
colnames(err.df3)[1] = "p"
err.df3$p = as.factor(round(err.df3$p,2))
ggplot(err.df3,aes(x=p,y=err,fill=name))+
geom_boxplot()+
labs(title="Different Missingness for Binary Response")
res = foreach(i=1:100, .packages = "gtools") %dopar% {
set.seed(i)
Pi = rdirichlet(N,rep(1,K))
Pi[1:K,] = diag(rep(1,K))
Theta = matrix(rbeta(J*K,100,100),ncol=K)
X_t = Pi%*%t(Theta)
err = lapply(p.seq,cal_missing_err,X_t,Pi)
return(err)
}
err.svd = matrix(rep(0,length(p.seq)*100),nrow=100)
err.hollow = matrix(rep(0,length(p.seq)*100),nrow=100)
err.hetero = matrix(rep(0,length(p.seq)*100),nrow=100)
for (i in 1:100) {
for (j in 1:length(p.seq)) {
err.svd[i,j] = res[[i]][[j]]$err.svd
err.hollow[i,j] = res[[i]][[j]]$err.hollow
err.hetero[i,j] = res[[i]][[j]]$err.hetero
}
}
library(tidyverse)
err.df.svd = data.frame(p.seq,t(err.svd))
err.df.svd2 = err.df.svd %>% pivot_longer(-p.seq,values_to = "err")
err.df.svd2$name = "SVD"
err.df.hollow = data.frame(p.seq,t(err.hollow))
err.df.hollow2 = err.df.hollow %>% pivot_longer(-p.seq,values_to = "err")
err.df.hollow2$name = "Hollow"
err.df.hetero = data.frame(p.seq,t(err.hetero))
err.df.hetero2 = err.df.hetero %>% pivot_longer(-p.seq,values_to = "err")
err.df.hetero2$name = "Hetero"
err.df3 = rbind(err.df.svd2,err.df.hollow2,err.df.hetero2)
colnames(err.df3)[1] = "p"
err.df3$p = as.factor(round(err.df3$p,2))
ggplot(err.df3,aes(x=p,y=err,fill=name))+
geom_boxplot()+
labs(title="Different Missingness for Binary Response")
## Poisson Matrix
## Missing
K = 3
N = 100
J = 5000
p.seq = seq(from=0.02,to=0.5,length=10)
cal_missing_err <- function(p,X_t,Pi){
X = matrix(rpois(N*J,X_t),nrow=N)
# X[X==0] = -1
Missing = matrix(rbinom(N*J,1,p),nrow=N)
X[Missing==0] = 0
svd.est = gom.svd(X/p,K)
idx.svd = find_best_idx(K,svd.est$Pi,Pi)
hollow.est = gom.hollow(X/p,K)
idx.hollow = find_best_idx(K,hollow.est$Pi,Pi)
hetero.est = gom.hetero(X/p,K)
idx.hetero = find_best_idx(K,hetero.est$Pi,Pi)
err.svd = mean(abs(svd.est$Pi[,idx.svd]-Pi))
err.hollow = mean(abs(hollow.est$Pi[,idx.hollow]-Pi))
err.hetero = mean(abs(hetero.est$Pi[,idx.hetero]-Pi))
return(list(err.svd=err.svd,err.hollow=err.hollow,err.hetero=err.hetero))
}
res = foreach(i=1:100, .packages = "gtools") %dopar% {
set.seed(i)
Pi = rdirichlet(N,rep(1,K))
Pi[1:K,] = diag(rep(1,K))
Theta = matrix(rgamma(J*K,9,0.5),ncol=K)
X_t = Pi%*%t(Theta)
err = lapply(p.seq,cal_missing_err,X_t,Pi)
return(err)
}
err.svd = matrix(rep(0,length(p.seq)*100),nrow=100)
err.hollow = matrix(rep(0,length(p.seq)*100),nrow=100)
err.hetero = matrix(rep(0,length(p.seq)*100),nrow=100)
for (i in 1:100) {
for (j in 1:length(p.seq)) {
err.svd[i,j] = res[[i]][[j]]$err.svd
err.hollow[i,j] = res[[i]][[j]]$err.hollow
err.hetero[i,j] = res[[i]][[j]]$err.hetero
}
}
boxplot(err.svd)
boxplot(err.hollow)
library(tidyverse)
err.df.svd = data.frame(p.seq,t(err.svd))
err.df.svd2 = err.df.svd %>% pivot_longer(-p.seq,values_to = "err")
err.df.svd2$name = "SVD"
err.df.hollow = data.frame(p.seq,t(err.hollow))
err.df.hollow2 = err.df.hollow %>% pivot_longer(-p.seq,values_to = "err")
err.df.hollow2$name = "Hollow"
err.df.hetero = data.frame(p.seq,t(err.hetero))
err.df.hetero2 = err.df.hetero %>% pivot_longer(-p.seq,values_to = "err")
err.df.hetero2$name = "Hetero"
err.df3 = rbind(err.df.svd2,err.df.hollow2,err.df.hetero2)
colnames(err.df3)[1] = "p"
err.df3$p = as.factor(round(err.df3$p,2))
ggplot(err.df3,aes(x=p,y=err,fill=name))+
geom_boxplot()+
labs(title="Different Missingness for Poisson Response")
source("D:/Programmes/Covariate-Assisted-Spectral-GoM/GoM_spectra.R")
setwd("D:/Programmes/Cyl_kPCA")
library(readxl)
library(tidyverse)
library(cdmTools)
library(Rfast)
loc = read_excel("cylinder/point.xlsx")
Vx.train = read_excel("cylinder/pointx.xlsx")
mu = rowMeans(Vx.train)
U_c = Vx.train-mu
Sig = U_c%*%t(U_c)
U_c = as.matrix(U_c)
Sig = U_c%*%t(U_c)
?HeteroPCA
U = HeteroPCA(Sig,5,max.iter = 1000)
